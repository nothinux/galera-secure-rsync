#!/bin/bash -ue

# Copyright (C) 2013 Toby Lawrence
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING. If not, write to the
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston
# MA  02110-1301  USA.

# This is a reference script for secure rsync-based state snapshot transfer.

. $(dirname $0)/wsrep_sst_common

MODULE="secure_rsync_sst"

# Set up our uid/gid.
MYUID=$(id -u)
MYGID=$(id -g)

# Set up our PID locations.
SOCAT_PID="$WSREP_SST_OPT_DATA/$MODULE-socat.pid"
RSYNC_PID="$WSREP_SST_OPT_DATA/$MODULE-rsync.pid"

# Some socat-specific variables.
SOCAT_SSL_DIR=/etc/mysql/ssl

# Some rsync-specific variables.
RSYNC_CONF="$WSREP_SST_OPT_DATA/$MODULE.conf"
RSYNC_DONOR_PORT=7776
RSYNC_JOINER_PORT=7777

# Some file locations.
FLUSHED="$WSREP_SST_OPT_DATA/tables_flushed"
MAGIC_FILE="$WSREP_SST_OPT_DATA/secure_rsync_sst_complete"

silent_kill()
{
    local pid=$1
    kill -9 $pid
    wait $pid 2>/dev/null
}

cleanup_joiner()
{
    local PID1=$(cat "$RSYNC_PID" 2>/dev/null || echo 0)
    local PID2=$(cat "$SOCAT_PID" 2>/dev/null || echo 0)
    [ "0" != "$PID1" ] && silent_kill $PID1 || :
    [ "0" != "$PID2" ] && silent_kill $PID2 || :
    rm -rf "$RSYNC_CONF"
    rm -rf "$MAGIC_FILE"
    rm -rf "$RSYNC_PID"
    rm -rf "$SOCAT_PID"

    wsrep_log_info "Joiner cleaned up."
}

cleanup_donor()
{
    local PID=$(cat "$SOCAT_PID" 2>/dev/null || echo 0)
    [ "0" != "$PID" ] && silent_kill $PID || :
    rm -rf "$MAGIC_FILE"
    rm -rf "$SOCAT_PID"

    wsrep_log_info "Donor cleaned up."
}

check_pid()
{
    local pid_file=$1
    [ -r $pid_file ] && ps -p $(cat $pid_file) >/dev/null 2>&1
}

check_pid_and_port()
{
    local pid_file=$1
    local pid=$(cat $pid_file >/dev/null || echo 0)
    local port=$2
    local service=$3

    check_pid $pid_file && \
    netstat -anpt 2>/dev/null | \
    grep LISTEN | grep \:$port | grep $pid/$service >/dev/null
}

# Make sure our magic file is cleared out before starting.
rm -rf "$MAGIC_FILE"

if [ "$WSREP_SST_OPT_ROLE" = "donor" ]
then
    # Pull out the remote address (host:port)
    SOCAT_ADDR=$WSREP_SST_OPT_ADDR
    if [ -z "$SOCAT_ADDR" ]
    then
        wsrep_log_error "No joiner address given to the donor script!"
        exit 64
    fi

    # Start up socat to forward our rsync connections to the joiner.
    socat TCP4-LISTEN:$RSYNC_DONOR_PORT,reuseaddr,fork \
    OPENSSL:$SOCAT_ADDR,pf=ip4,cafile=$SOCAT_SSL_DIR/server.crt,cert=$SOCAT_SSL_DIR/client.pem &>/dev/null &
    echo $! >$SOCAT_PID

    if [ $WSREP_SST_OPT_BYPASS -eq 0 ]
    then
        # Clear out the "flushed" signal file if it already exists.
        rm -rf "$FLUSHED"

        # Instruct Galera to flush all tables.
        echo "flush tables"

        # Wait for the tables to be flushed and the state to be populated.
        while [ ! -r "$FLUSHED" ] && ! grep -q ':' "$FLUSHED" >/dev/null 2>&1
        do
            sleep 0.2
        done

        # Grab the state data and remove the file.
        STATE="$(cat $FLUSHED)"
        rm -rf "$FLUSHED"

        # Flush any pending writes to disk.
        sync

        # Exclude all files except directories (schemas) and InnoDB files.
        FILTER=(-f '+ /ib_lru_dump' -f '+ /ibdata*' -f '+ /ib_logfile*' -f '+ */' -f '- lost+found/' -f '-! */*')

        trap "exit 32" HUP PIPE
        trap "exit 3"  INT TERM
        trap cleanup_donor EXIT

        RC=0
        rsync --archive --quiet --no-times --ignore-times --inplace --delete --whole-file \
        "${FILTER[@]}" "$WSREP_SST_OPT_DATA" rsync://localhost:$RSYNC_DONOR_PORT/$MODULE || RC=$?

        # If we didn't have a successful transfer, let the caller know.
        [ $RC -ne 0 ] && echo "rsync returned code $RC:" >> /dev/stderr

        case $RC in
        0)  RC=0   # Success
            ;;
        12) RC=71  # EPROTO
            wsrep_log_error \
                 "rsync server on the other end has incompatible protocol. " \
                 "Make sure you have the same version of rsync on all nodes."
            ;;
        22) RC=12  # ENOMEM
            ;;
        *)  RC=255 # unknown error
            ;;
        esac

        [ $RC -ne 0 ] && exit $RC

    else # BYPASS
        wsrep_log_info "Bypassing state dump."
        STATE="$WSREP_SST_OPT_GTID"
    fi

    # Now server can resume updating data.
    echo "continue"

    # Send the magic file to the joiner, signaling that the state transfer is complete.
    echo "$STATE" >"$MAGIC_FILE"
    rsync --archive --quiet --checksum --delete "$MAGIC_FILE" rsync://localhost:$RSYNC_DONOR_PORT/$MODULE

    # Cleanup socat, other files, etc.
    cleanup_donor

    echo "done $STATE"
elif [ "$WSREP_SST_OPT_ROLE" = "joiner" ]
then
    MYSQLD_PID=$WSREP_SST_OPT_PARENT

    # See if rsync is already running.
    if check_pid $RSYNC_PID
    then
        wsrep_log_error "rsync daemon already running."
        exit 114 # EALREADY
    fi

    # Clear our the existing rsync PID file.
    rm -rf "$RSYNC_PID"

    # Figure out what our external port should be.
    ADDR=$WSREP_SST_OPT_ADDR
    SOCAT_PORT=$(echo $ADDR | awk -F ':' '{ print $2 }')
    if [ -z "$SOCAT_PORT" ]
    then
        # No port specified, use the default.
        SOCAT_PORT=4444
        ADDR="$(echo $ADDR | awk -F ':' '{ print $1 }'):$SOCAT_PORT"
    fi

    trap "exit 32" HUP PIPE
    trap "exit 3"  INT TERM
    trap cleanup_joiner EXIT

# Build the rsync configuration file.
cat << EOF > "$RSYNC_CONF"
pid file = $RSYNC_PID
use chroot = no
[$MODULE]
        path = $WSREP_SST_OPT_DATA
        read only = no
        timeout = 300
        uid = $MYUID
        gid = $MYGID
EOF

    # Start socat and listen for incoming connections, forwarding them to rsync.
    socat OPENSSL-LISTEN:$SOCAT_PORT,reuseaddr,fork,pf=ip4,cert=$SOCAT_SSL_DIR/server.pem,cafile=$SOCAT_SSL_DIR/client.crt \
    TCP4:localhost:$RSYNC_JOINER_PORT &>/dev/null &
    echo $! >$SOCAT_PID

    # Wait until socat is up and running and ready.
    until check_pid_and_port $SOCAT_PID $SOCAT_PORT "socat"
    do
        sleep 0.2
    done

    # Listen at all interfaces (for firewalled setups) for incoming connections.
    rsync --daemon --address localhost --port $RSYNC_JOINER_PORT --config "$RSYNC_CONF"

    # Wait until rsync is up and running and ready.
    until check_pid_and_port $RSYNC_PID $RSYNC_JOINER_PORT "rsync"
    do
        sleep 0.2
    done

    # Tell Galera we're ready to get our data.
    echo "ready $ADDR"

    # Wait for SST to complete by monitoring for the magic file being written.
    while [ ! -r "$MAGIC_FILE" ] && check_pid "$RSYNC_PID" && \
          ps -p $MYSQLD_PID >/dev/null
    do
        sleep 1
    done

    # Make sure MySQL didn't fail during our SST.
    if ! ps -p $MYSQLD_PID >/dev/null
    then
        echo "Parent mysqld process (PID:$MYSQLD_PID) terminated unexpectedly." >&2
        exit 32
    fi

    # If we have the magic file, echo the contents to tell Galera what our GTID is now.
    if [ -r "$MAGIC_FILE" ]
    then
        cat "$MAGIC_FILE" # output UUID:seqno
    else
        # this message should cause joiner to abort
        echo "rsync process ended without creating '$MAGIC_FILE'"
    fi

    # Now do our cleanup - stop socat, rsync, remove temporary files, etc.
    cleanup_joiner
else
    wsrep_log_error "Unrecognized role: '$WSREP_SST_OPT_ROLE'"
    exit 22 # EINVAL
fi

exit 0
